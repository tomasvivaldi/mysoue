type Products {
  affiliate_link: String!
  created_at: DateTime
  image_url: String
  price: Float!
  product_description: String
  product_description_thai: String
  id: ID!
  product_name: String!
  product_name_thai: String!
  updated_at: DateTime
  platform: String
  category: String
  subcategory: String
  brand: String
  store_link: String
  highlighted: Boolean
  pre_list: String
  wishlist_items: [Wishlist_items]
    @materializer(
      query: "wishlistItemsByProductId"
      arguments: [{ name: "product_id", field: "id" }]
    )
}

type PreList {
  pre_list: String
}

type Users {
  created_at: DateTime
  email: String!
  id: ID!
  oauth_provider: String
  password_hash: String!
  profile_picture_url: String
  updated_at: DateTime
  username: String
  birthdate: DateTime
  gender: String
  first_name: String
  last_name: String
}

type UserData {
  created_at: DateTime
  email: String!
  id: ID!
  oauth_provider: String
  password_hash: String!
  profile_picture_url: String
  updated_at: DateTime
  username: String
  birthdate: DateTime
  gender: String
  first_name: String
  last_name: String
  wishlists: [Wishlists]
    @materializer(
      query: "wishlistsListByUserId"
      arguments: [{ name: "user_id", field: "id" }]
    )
}

type Wishlist_items {
  added_at: DateTime
  additional_description: String
  product_id: ID
  external_product_id: ID
  quantity: Int!
  updated_at: DateTime!
  wishlist_id: ID!
  id: ID!
  products: Products
    @materializer(
      query: "productsById"
      arguments: [{ name: "id", field: "product_id" }]
    )
  external_products: ExternalProduct
    @materializer(
      query: "externalProductById"
      arguments: [{ name: "id", field: "external_product_id" }]
    )
  reserved_gifts: [ReservedGifts]
    @materializer(
      query: "reservedGiftsByWishlistItemId"
      arguments: [{ name: "wishlist_item_id", field: "id" }]
    )
  wishlists: [Wishlists]
    @materializer(
      query: "wishlistsById"
      arguments: [{ name: "id", field: "wishlist_id" }]
    )
}

type Wishlists {
  address: String
  created_at: DateTime
  description: String
  due_date: DateTime
  require_address: Boolean
  title: String!
  type: String
  updated_at: DateTime
  user_id: ID!
  id: ID!
  wishlist_items: [Wishlist_items]
    @materializer(
      query: "wishlist_itemsListByUserId"
      arguments: [{ name: "wishlist_id", field: "id" }]
    )
  shared_wishlists: [Shared_wishlists]
    @materializer(
      query: "sharedWishlistsByWishlistId"
      arguments: [{ name: "wishlist_id", field: "id" }]
    )
}

type Shared_wishlists {
  share_token: String
  created_at: DateTime
  expires_at: DateTime
  wishlist_id: ID!
  id: ID!
}

type ReservedGifts {
  id: ID!
  name_and_surname: String!
  email: String!
  private_message: String
  created_at: DateTime!
  updated_at: DateTime!
  wishlist_item_id: ID!
}

type ExternalProduct {
  id: ID!
  product_name: String!
  product_description: String
  price: Float
  image_url: String
  category: String
  brand: String
  store_link: String
  created_at: DateTime!
  updated_at: DateTime!
}


"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Products' "
  productsById(id: ID!): Products
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "products"
      configuration: "stepzen_config"
    )
  productsList: [Products]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "products"
      configuration: "stepzen_config"
    )
  productsPaginatedList(first: Int, after: Int): [Products]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "affiliate_link", "created_at", "image_url", "price", "product_description", "product_description_thai", "id", "product_name", "product_name_thai", "updated_at", "pre_list" FROM "products" LIMIT $1 OFFSET $2
      """
      configuration: "stepzen_config"
    )
  preLists: [PreList]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
        SELECT DISTINCT "pre_list" AS pre_list
        FROM "products"
      """
      configuration: "stepzen_config"
    )
  productsByPreList(pre_list: String!): [Products]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
        SELECT *
        FROM "products"
        WHERE "pre_list" = $1
      """
      configuration: "stepzen_config"
    )
  " Queries for type 'Users' "
  userDataById(id: ID!): UserData
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT *
      FROM "users"
      WHERE "id" = $1
      """
      configuration: "stepzen_config"
    )
  usersById(id: ID!): [Users]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      configuration: "stepzen_config"
    )
  usersByEmail(email: String!): [Users]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      configuration: "stepzen_config"
    )
  usersByIdAndOauth_provider(id: ID!, oauth_provider: String!): [Users]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      configuration: "stepzen_config"
    )
  usersList: [Users]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      configuration: "stepzen_config"
    )
  usersPaginatedList(first: Int, after: Int): [Users]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "email", "id", "oauth_provider", "password_hash", "profile_picture_url", "updated_at", "username" FROM "users" LIMIT $1 OFFSET $2
      """
      configuration: "stepzen_config"
    )
  " Queries for type 'Wishlist_items' "
  wishlistItemsById(id: ID!): [Wishlist_items]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "wishlist_items"
      configuration: "stepzen_config"
    )
  wishlist_itemsListByUserId(wishlist_id: ID!): [Wishlist_items]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT *
      FROM "wishlist_items"
      WHERE "wishlist_id" = $1
      ORDER BY "updated_at" DESC
      """
      configuration: "stepzen_config"
    )
  wishlist_itemsList: [Wishlist_items]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "wishlist_items"
      configuration: "stepzen_config"
    )
  wishlist_itemsPaginatedList(first: Int, after: Int): [Wishlist_items]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "added_at", "additional_description", "product_id", "quantity", "updated_at", "wishlist_id", "id" FROM "wishlist_items" LIMIT $1 OFFSET $2
      """
      configuration: "stepzen_config"
    )
  wishlistItemsByProductId(product_id: ID!): [Wishlist_items]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT *
      FROM "wishlist_items"
      WHERE "product_id" = $1
      """
      configuration: "stepzen_config"
    )
  " Queries for type 'Wishlists' "
  wishlistsById(id: ID!): [Wishlists]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "wishlists"
      configuration: "stepzen_config"
    )
  wishlistsList: [Wishlists]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "wishlists"
      configuration: "stepzen_config"
    )
  wishlistsPaginatedList(first: Int, after: Int): [Wishlists]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "address", "created_at", "description", "due_date", "require_address", "title", "type", "updated_at", "user_id", "id" FROM "wishlists" LIMIT $1 OFFSET $2
      """
      configuration: "stepzen_config"
    )
  wishlistsListByUserId(user_id: ID!): [Wishlists]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT *
      FROM "wishlists"
      WHERE "user_id" = $1
      ORDER BY "updated_at" DESC
      """
      configuration: "stepzen_config"
    )
  " Queries for type 'Shared_wishlists' "
  sharedWishlistsById(id: ID!): [Shared_wishlists]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "shared_wishlists"
      configuration: "stepzen_config"
    )
  sharedWishlistsByWishlistId(wishlist_id: ID!): [Shared_wishlists]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "shared_wishlists"
      WHERE "wishlist_id" = $1
      """
      configuration: "stepzen_config"
    )
  sharedWishlistsByToken(share_token: String!): [Shared_wishlists]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "shared_wishlists"
      WHERE "share_token" = $1
      """
      configuration: "stepzen_config"
    )
  sharedWishlistsList: [Shared_wishlists]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "shared_wishlists"
      configuration: "stepzen_config"
    )
  sharedWishlistsPaginatedList(first: Int, after: Int): [Shared_wishlists]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "share_token", "created_at", "expires_at", "wishlist_id", "id"
      FROM "shared_wishlists"
      LIMIT $1 OFFSET $2
      """
      configuration: "stepzen_config"
    )
    
  " Query for ReservedGifts by wishlist_item_id (used by the materializer on Wishlist_items) "
  reservedGiftsByWishlistItemId(wishlist_item_id: ID!): [ReservedGifts]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT *
      FROM "reserved_gifts"
      WHERE "wishlist_item_id" = $1
      """
      configuration: "stepzen_config"
    )
  " Query for Wishlists by wishlist_id (used by the materializer on Wishlist_items) "
  wishlistsByWishlistItemId(wishlist_id: ID!): [Wishlists]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT *
      FROM "wishlist_items"
      WHERE "wishlist_id" = $1
      """
      configuration: "stepzen_config"
    )      
  " Queries for type 'ExternalProduct' "
  externalProductById(id: ID!): ExternalProduct
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "external_products"
      configuration: "stepzen_config"
    )
  externalProductsList: [ExternalProduct]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "external_products"
      configuration: "stepzen_config"
    )
  externalProductsPaginatedList(first: Int, after: Int): [ExternalProduct]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "id", "product_name", "product_description", "price", "image_url", "category", "brand", "store_link", "created_at", "updated_at"
      FROM "external_products" LIMIT $1 OFFSET $2
      """
      configuration: "stepzen_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Products' "
  deleteProducts(
    product_description: String!
    price: Float!
    product_description_thai: String!
    product_name: String!
    id: ID!
    product_name_thai: String!
    created_at: DateTime!
    updated_at: DateTime!
    image_url: String!
    affiliate_link: String!
    pre_list: String!
  ): Products
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "products"
      dml: DELETE
      configuration: "stepzen_config"
    )
  insertProducts(
    product_description: String
    price: Float!
    product_description_thai: String
    product_name: String!
    product_name_thai: String!
    created_at: DateTime
    updated_at: DateTime
    image_url: String
    affiliate_link: String!
    pre_list: String!
  ): Products
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "products"
      dml: INSERT
      configuration: "stepzen_config"
    )
  " Mutations for type 'Users' "
  deleteUsers(
    oauth_provider: String!
    email: String!
    username: String!
    id: ID!
    password_hash: String!
    created_at: DateTime!
    updated_at: DateTime!
    profile_picture_url: String!
  ): Users
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      dml: DELETE
      configuration: "stepzen_config"
    )
  insertUsers(
    oauth_provider: String
    email: String!
    username: String
    password_hash: String
    created_at: DateTime
    # updated_at: DateTime
    profile_picture_url: String
    first_name: String
    last_name: String
    gender: String
    birthdate: Date
  ): Users
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      dml: INSERT
      configuration: "stepzen_config"
    )
  updateUsers(
    email: String!
    first_name: String
    last_name: String
    birthdate: Date
    gender: String
  ): Users
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE users
      SET 
        first_name = COALESCE($2, first_name),
        last_name = COALESCE($3, last_name),
        birthdate = COALESCE($4, birthdate),
        gender = COALESCE($5, gender),
        updated_at = NOW()
      WHERE email = $1
      RETURNING *;
      """
      configuration: "stepzen_config"
    )
    
  " Mutations for type 'Wishlist_items' "
  deleteWishlist_items(
    quantity: Int!
    wishlist_id: ID!
    additional_description: String
    product_id: ID!
    id: ID!
    updated_at: DateTime
    added_at: DateTime
  ): Wishlist_items
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "wishlist_items"
      dml: DELETE
      configuration: "stepzen_config"
    )
  insertWishlist_items(
    quantity: Int!
    wishlist_id: ID!
    additional_description: String
    product_id: ID!
    updated_at: DateTime!
    added_at: DateTime
  ): Wishlist_items
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "wishlist_items"
      dml: INSERT
      configuration: "stepzen_config"
    )
  updateWishlist_items(
    id: ID!
    quantity: Int
    wishlist_id: ID
    additional_description: String
    product_id: ID
    updated_at: DateTime
    added_at: DateTime
  ): Wishlist_items
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE wishlist_items
      SET
        quantity = COALESCE($2, quantity),
        wishlist_id = COALESCE($3, wishlist_id),
        additional_description = COALESCE($4, additional_description),
        product_id = COALESCE($5, product_id),
        updated_at = COALESCE($6, updated_at),
        added_at = COALESCE($7, added_at)
      WHERE id = $1
      RETURNING id, wishlist_id, product_id, quantity, additional_description, updated_at, added_at;
      """
      configuration: "stepzen_config"
    )
  " Mutations for type 'Wishlists' "
  deleteWishlists(
    id: ID!
    user_id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    description: String!
    require_address: Boolean!
    due_date: DateTime!
    address: String!
    title: String!
    type: String!
  ): Wishlists
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "wishlists"
      dml: DELETE
      configuration: "stepzen_config"
    )
  insertWishlists(
    user_id: ID!
    created_at: DateTime
    updated_at: DateTime
    description: String
    require_address: Boolean
    due_date: DateTime
    address: String
    title: String!
    type: String
  ): Wishlists
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "wishlists"
      dml: INSERT
      configuration: "stepzen_config"
    )
  " Mutations for type 'shared_wishlists' "
  deleteSharedWishlists(
    id: ID!
    wishlist_id: ID!
    share_token: String!
    created_at: DateTime!
    expires_at: DateTime!
  ): Shared_wishlists
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "shared_wishlists"
      dml: DELETE
      configuration: "stepzen_config"
    )
  insertSharedWishlists(
    wishlist_id: ID!
    share_token: String!
    created_at: DateTime
    expires_at: DateTime
  ): Shared_wishlists
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "shared_wishlists"
      dml: INSERT
      configuration: "stepzen_config"
    )
  updateSharedWishlists(
    id: ID!
    share_token: String
    expires_at: DateTime
  ): Shared_wishlists
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE shared_wishlists
      SET 
        share_token = COALESCE($2, share_token),
        expires_at = COALESCE($3, expires_at)
      WHERE id = $1
      RETURNING *;
      """
      configuration: "stepzen_config"
    )

  " Mutations for type 'ReservedGifts' "
  insertReservedGifts(
    name_and_surname: String!
    email: String!
    private_message: String
    wishlist_item_id: ID!
    created_at: DateTime
    updated_at: DateTime
  ): ReservedGifts
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "reserved_gifts"
      dml: INSERT
      configuration: "stepzen_config"
    )
  deleteReservedGifts(
    id: ID!
    name_and_surname: String!
    email: String!
    private_message: String!
    created_at: DateTime!
    updated_at: DateTime!
    wishlist_item_id: ID!
  ): ReservedGifts
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "reserved_gifts"
      dml: DELETE
      configuration: "stepzen_config"
    )
  updateReservedGifts(
    id: ID!
    name_and_surname: String
    email: String
    private_message: String
    wishlist_item_id: ID
  ): ReservedGifts
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE reserved_gifts
      SET 
        name_and_surname = COALESCE($2, name_and_surname),
        email = COALESCE($3, email),
        private_message = COALESCE($4, private_message),
        wishlist_item_id = COALESCE($5, wishlist_item_id),
        updated_at = NOW()
      WHERE id = $1
      RETURNING *;
      """
      configuration: "stepzen_config"
    )
  " Mutations for type 'ExternalProduct' "
  insertExternalProduct(
    product_name: String!
    product_description: String
    price: Float
    image_url: String
    category: String
    brand: String
    store_link: String
    created_at: DateTime!
    updated_at: DateTime!
  ): ExternalProduct
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "external_products"
      dml: INSERT
      configuration: "stepzen_config"
    )
  deleteExternalProduct(
    id: ID!
    product_name: String!
    product_description: String
    price: Float
    image_url: String
    category: String
    brand: String
    store_link: String
    created_at: DateTime!
    updated_at: DateTime!
  ): ExternalProduct
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "external_products"
      dml: DELETE
      configuration: "stepzen_config"
    )
  updateExternalProduct(
    id: ID!
    product_name: String
    product_description: String
    price: Float
    image_url: String
    category: String
    brand: String
    store_link: String
    updated_at: DateTime!
  ): ExternalProduct
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE external_products
      SET 
        product_name = COALESCE($2, product_name),
        product_description = COALESCE($3, product_description),
        price = COALESCE($4, price),
        image_url = COALESCE($5, image_url),
        category = COALESCE($6, category),
        brand = COALESCE($7, brand),
        store_link = COALESCE($8, store_link),
        updated_at = COALESCE($9, updated_at)
      WHERE id = $1
      RETURNING *;
      """
      configuration: "stepzen_config"
    )
}